{
  "compilerOptions": {
    // 指定根路径，默认为所有非声明输入文件的最长公共路径
    // "rootDir": ".",
    // 指定多个路径作为虚拟的根路径
    // "rootDirs": ["."],
    // 指定被编译为的js版本
    // 可选值: es3（默认值）, es5, es6/es2015, es2016, es2017, es2018, es2019, es2020, es2021, es2022, esnext
    "target": "es6",
    // 指定要使用的模块化规范
    // 可选值: none, commonjs, amd, umd, system, es6/es2015, es2020, es2022, esnext, node12, nodenext
    // 默认值: target 为 es3/es5 时:  commonjs，其他: es6/es2015
    "module": "es6",
    // 指定项目中要使用到的库
    // 可选值: es5, es2015, es6, es2016, es7, es2017, es2018, es2019, es2020, es2021, esnext, dom, webworker, scripthost
    // 默认值: target 为 es5 时: dom，es5，scripthost, target 为 es6 时: dom，es6，dom.iterable，scripthost
    "lib": ["es6", "dom"],
    // 是否需要对目录中的 js 文件进行编译，而不仅仅是 ts、tsx，默认值为 false
    // "allowJs": false,
    // 是否需要检查 js 文件中的错误，需要与 allowJs 配合使用，默认值为 false
    // "checkJs": false,
    // 编译输出文件时是否需要删除注释，默认值为 false
    // "removeComments": false,
    // 编译后是否需要输出文件，包括 code、source-maps、declarations，默认值为 false
    // "noEmit": false,
    // 编译出错后是否还是需要输出文件，包括 code、source-maps、declarations，默认值为 false
    // "noEmitOnError": false,
    // 编译时是否需要输出辅助函数到文件内容中，默认值为 false
    // "noEmitHelpers": false,
    // 是否为每个输出文件生成 .d.ts 结尾的声明文件
    "declaration": true,
    // 是否为每个输出的声明文件生成 source map 文件
    "declarationMap": false,
    // 指定声明文件的输出目录
    // "declarationDir": "./types",
    // 是否只输出 .d.ts 结尾的声明文件，而不输出 js 文件
    // "emitDeclarationOnly": true,
    // 是否启用严格类型检查，相当于启用了 alwaysStrict, noImplicitAny, noImplicitThis, strictNullChecks, strictFunctionTypes, strictPropertyInitialization 等
    // 默认值为 false
    // "strict": false,
    // 是否以严格模式解析源文件，并对每个输出文件使用严格模式，即生成 "use strict"
    // 默认值：当 strict 为 true 时: true，其他: false
    // 注：以下严格校验字段的默认值该该字段默认值规则一样
    "alwaysStrict": false,
    // 是否校验 call、apply、bind 绑定的底层函数参数类型
    // "strictBindCallApply": false,
    // 是否校验函数参数类型
    // "strictFunctionTypes": false,
    // 是否严格校验空值情况
    // "strictNullChecks": false,
    // 是否校验声明了类属性但未在构造函数中初始化的情况
    // "strictPropertyInitialization": false,
    // 是否允许隐式的 any 类型，默认值为 false
    // "noImplicitAny": false,
    // 当子类覆盖父类同名属性或方法时是否需要校验，默认值为 false
    // "noImplicitOverride": false,
    // 函数返回值类型不一致时是否需要校验，默认为 false
    "noImplicitReturns": true,
    // 是否校验 this 上的属性引用，默认为 false
    "noImplicitThis": true,
    // 是否不需要在输出文件中使用严格模式，默认值为 false
    "noImplicitUseStrict": true,
    // 在比较两个泛型函数时是否会统一类型参数
    // "noStrictGenericChecks": true,
    // 是否需要根据环境降级实现迭代器逻辑
    "downlevelIteration": true,
    // 辅助函数是否从 tslib 模块导入，否则直接内嵌到当前输出文件中，默认值为 false
    // "importHelpers": false,
    // source map 是否允许内嵌到 js 文件的内容中（注：需要先设置 inlineSourceMap 或 sourceMap）
    // "inlineSources": false,
    // 是否需要生成 source map 文件
    // "sourceMap": false,
    // source map 是否允许内嵌到 js 文件的内容中）
    // "inlineSourceMap": false,
    // 模块解析策略
    // 可选值: classic, node, node12, nodenext
    // 默认值: 当 module 为 amd, umd, system or es6/es2015 时: classic，其他: node, node12, nodenext
    "moduleResolution": "node",
    // 是否支持解析 json 文件，默认为 false
    // "resolveJsonModule": false,
    // 是否需要检查确保所有 switch 的 case 后面都使用了 break 或 return
    "noFallthroughCasesInSwitch": true,
    // 是否需要检查未使用的局部变量，默认为 false
    "noUnusedLocals": true,
    // 是否需要检查未使用的参数，默认为 false
    "noUnusedParameters": true,
    // 是否保留控制台之前的输出，避免重新编译导致控制台清空，默认为 false
    "preserveWatchOutput": true,
    // 是否美化提示信息，默认为 false
    "pretty": true,
    // 是否显示所有提示信息，而不是因为长度过长而截断，默认为 false
    "noErrorTruncation": true,
    // 参考 https://www.typescriptlang.org/tsconfig#esModuleInterop
    "esModuleInterop": true,
    // 是否允许导入没有默认导出的模块，即允许自动合成后作为默认导入
    // "allowSyntheticDefaultImports": false,
    // 文件名是否强制使用一致的大小写
    "forceConsistentCasingInFileNames": true,
    // 是否跳过库声明文件的检查，默认值为false
    "skipLibCheck": true
  }
}
